#!/usr/bin/env python3

import networkx
import copy
import random

K = 160
O = K - 1
D = -O
R = 250
MIN_MARGIN = 3
MIN_TESTS = 18
MAX_TESTS = int(MIN_TESTS * 1.25)
FRAMES_PER_READ = 10
SCORE_PEAK_FACTOR = 0.24

CORRECT_PATHS_FRACTION = 0.5
OVERLAP_BETWEEN_NODES = O // 2
# Chance of 0 errors, chance of 1 error, etc.
ERROR_COUNT_CUMULATIVE_DISTRIBUTION = [ 0.30, 0.80, 1.0 ]
CORRECT_PATHS_FILENAME = 'correct_paths'

INPUT_DOT_FILENAME = 'input.dot'
INPUT_FA_FILENAME = 'input.fa'
OUTPUT_DOT_FILENAME = 'output.dot'
OUTPUT_FA_FILENAME = 'output.fa'
READS_FILENAME = 'reads.fa'

BASES = [ 'A', 'C', 'T', 'G' ]

def shorten(sequence):
    if len(sequence) <= 8:
        return sequence
    else:
        return sequence[:4] + "..." + sequence[-4:]

def read_long_enough(read_size, repeat_size):
    return read_size >= MIN_TESTS - 1 + MIN_MARGIN + repeat_size + MIN_MARGIN

def path_sequence_long_enough(path_size, read_size):
    return path_size < 2 * R - read_size - 2 * MIN_MARGIN

def random_sequence(size):
    sequence = ""
    for _ in range(size):
        sequence += BASES[random.randint(0, 3)]
    return sequence

def next_name():
    next_name.names += 1
    return str(next_name.names)
next_name.names = -1

class Node:

    def __init__(self, name, sequence):
        self.name = name
        self.sequence = sequence

    def __str__(self):
        return self.name

    def __hash__(self):
        return self.name.__hash__()

def make_rc_graph(graph):
    rc_graph = copy.deepcopy(graph).reverse()

    for node in graph.nodes():
        node.name += "+"

    for node in rc_graph.nodes():
        node.name += "-"

    combined_graph = networkx.algorithms.operators.binary.compose(graph, rc_graph)
    distance = networkx.get_edge_attributes(combined_graph, 'd')
    length = networkx.get_node_attributes(combined_graph, 'l')
    coverage = networkx.get_node_attributes(combined_graph, 'C')

    fixed_combined_graph = networkx.DiGraph()
    for node in combined_graph.nodes():
        if node.name[-1] == '+':
            fixed_combined_graph.add_node(node, l=length[node], C=coverage[node])
            for pair_node in combined_graph.nodes():
                if pair_node.name[:-1] == node.name[:-1] and pair_node.name != node.name:
                    fixed_combined_graph.add_node(pair_node, l=length[pair_node], C=coverage[pair_node])
    for edge in combined_graph.edges():
        fixed_combined_graph.add_edge(edge[0], edge[1], d=distance[edge])
    return fixed_combined_graph

def write_sequence_graph(graph, dot_filename, fa_filename):
    print('Writing sequence graph... ', end='', flush=True)

    graph = make_rc_graph(graph)

    out = networkx.drawing.nx_pydot.to_pydot(networkx.DiGraph())
    out.set_strict(False)
    out.set_name('adj')
    out.set_graph_defaults(k=K)
    out.set_edge_defaults(d=D)

    pydot_graph = networkx.drawing.nx_pydot.to_pydot(graph)
    for edge in pydot_graph.get_edges():
        edge.set_label(int(edge.get_label('d')), 'd')

    for node in pydot_graph.get_nodes():
        out.add_node(node)
    for edge in pydot_graph.get_edges():
        out.add_edge(edge)

    out.write(dot_filename, prog='dot')

    with open(fa_filename, 'w') as f:
        for node in graph.nodes():
            if node.name[-1] == "+":
                f.write('>' + node.name[:-1] + '\n' + node.sequence + '\n')

    print('Done!')

def add_left(graph, node, size, overlap):
    left_node = Node(next_name(), random_sequence(size - overlap) + node.sequence[:overlap])
    graph.add_node(left_node, l=size, C=0)
    graph.add_edge(left_node, node, d=-overlap)
    return left_node

def add_right(graph, node, size, overlap):
    right_node = Node(next_name(), node.sequence[-overlap:] + random_sequence(size - overlap))
    graph.add_node(right_node, l=size, C=0)
    graph.add_edge(node, right_node, d=-overlap)
    return right_node

def build_input_graph():
    print('Building input graph... ', end='', flush=True)

    graph = networkx.DiGraph()
    start = Node(next_name(), random_sequence(K))
    graph.add_node(start, l=K, C=0)

    for _ in range(2):
        node = add_left(graph, start, K, OVERLAP_BETWEEN_NODES)
        for _ in range(2):
            add_left(graph, node, K, OVERLAP_BETWEEN_NODES)
    for _ in range(2):
        node = add_right(graph, start, K, OVERLAP_BETWEEN_NODES)
        for _ in range(2):
            add_right(graph, node, K, OVERLAP_BETWEEN_NODES)

    print('Done!')

    return graph

def get_correct_paths(graph):
    print('Finding correct paths... ', end='\n', flush=True)

    paths = []
    with open(CORRECT_PATHS_FILENAME, 'w') as f:
        for node in graph.nodes():
            if (len(graph.in_edges(node)) == 0) or (len(graph.out_edges(node)) == 0): continue

            for in_edge in graph.in_edges(node):
                for out_edge in graph.out_edges(node):
                    if random.random() <= CORRECT_PATHS_FRACTION:
                        in_node = in_edge[0]
                        out_node = out_edge[1]
                        f.write(
                            "[" + in_node.name + ": " + shorten(in_node.sequence) + "] -> " + \
                            "[" + node.name + ": " + shorten(node.sequence) + "] -> " + \
                            "[" + out_node.name + ": " + shorten(out_node.sequence) + "]\n"
                        )
                        paths.append((in_node, in_edge, node, out_edge, out_node))

    print('Done!')

    return paths

def make_reads(graph, correct_paths):
    print('Generating reads... ', end='', flush=True)

    reads = []
    for path in correct_paths:
        distance = networkx.get_edge_attributes(graph, 'd')

        in_node = path[0]
        in_edge = path[1]
        in_overlap = -distance[in_edge]

        node = path[2]

        out_edge = path[3]
        out_overlap = -distance[out_edge]
        out_node = path[4]

        path_sequence = in_node.sequence + node.sequence[in_overlap:] + out_node.sequence[out_overlap:]
        while path_sequence_long_enough(len(path_sequence), len(node.sequence)):
            in_edges = [ edge for edge in graph.in_edges(in_node) ]
            if (len(in_edges) > 0):
                in_edge = in_edges[random.randint(0, len(in_edges) - 1)]
                in_node = in_edge[0]
                in_overlap = -distance[in_edge]
                in_sequence = in_node.sequence[-in_overlap:]
            else:
                in_sequence = ""

            out_edges = [ edge for edge in graph.out_edges(out_node) ]
            if (len(out_edges) > 0):
                out_edge = out_edges[random.randint(0, len(out_edges) - 1)]
                out_node = out_edge[1]
                out_overlap = -distance[out_edge]
                out_sequence = out_node.sequence[out_overlap:]
            else:
                out_sequence = ""

            path_sequence = in_sequence + path_sequence + out_sequence

        for i in range(len(path_sequence) - R):
            read = path_sequence[i:(i + R)]
            r = random.random()
            error_positions = []
            for error_count in range(len(ERROR_COUNT_CUMULATIVE_DISTRIBUTION)):
                if r <= ERROR_COUNT_CUMULATIVE_DISTRIBUTION[error_count]:
                    for _ in range(error_count):
                        while True:
                            pos = random.randint(0, len(read) - 1)
                            if not pos in error_positions:
                                error_positions.append(pos)
                                break
                    break
            for pos in error_positions:
                while True:
                    erroneous_base = BASES[random.randint(0, len(BASES) - 1)]
                    if (erroneous_base != read[pos]):
                        read = read[:pos] + erroneous_base + read[(pos + 1):]
                        break
            reads.append(read)

    print('Done!')

    return reads

def write_reads(reads):
    print('Writing reads... ', end='', flush=True)

    counter = 0
    with open(READS_FILENAME, 'w') as f:
        for read in reads:
            f.write('>' + str(counter) + '\n')
            f.write(read + '\n')
            counter += 1

    print('Done!')

def build_output_graph(graph, correct_paths, reads):
    print('Building output graph...', end='', flush=True)

    out_graph = networkx.DiGraph()

    length = networkx.get_node_attributes(graph, 'l')
    coverage = networkx.get_node_attributes(graph, 'C')

    class Instance:

        def __init__(self, node, instance_node, original_in_nodes, original_out_nodes, in_instances, out_instances):
            self.node = node
            self.instance_node = instance_node
            self.original_in_nodes = original_in_nodes
            self.original_out_nodes = original_out_nodes
            self.in_instances = in_instances
            self.out_instances = out_instances

    node_instances = {}
    for node in graph.nodes():
        node_correct_paths = []
        for path in correct_paths:
            if path[2] == node:
                node_correct_paths.append(path)

        instances = []

        if (len(graph.in_edges(node)) == 0) or (len(graph.out_edges(node)) == 0):
            instance_node = Node(node.name + "/" + str(len(instances)), node.sequence)
            out_graph.add_node(instance_node, l=length[node], C=coverage[node])
            instances.append(Instance(node, instance_node, [], [], [], []))
        else:
            for in_edge in graph.in_edges(node):
                in_node = in_edge[0]

                out_nodes = []
                for out_edge in graph.out_edges(node):
                    out_node = out_edge[1]

                    found = False
                    for path in node_correct_paths:
                        if (path[0] == in_node) and (path[4] == out_node):
                            found = True
                            break
                    if found:
                        out_nodes.append(out_node)

                if len(out_nodes) == 0: continue

                found = False
                for instance in instances:
                    if len(instance.original_out_nodes) == len(out_nodes):
                        match = True
                        for i in range(len(out_nodes)):
                            if instance.original_out_nodes[i] != out_nodes[i]: match = False
                        if match:
                            found = True
                            instance.original_in_nodes.append(in_node)

                if not found:
                    instance_node = Node(node.name + "/" + str(len(instances)), node.sequence)
                    out_graph.add_node(instance_node, l=length[node], C=coverage[node])
                    instances.append(Instance(node, instance_node, [ in_node ], out_nodes, [], []))

        if len(instances) == 0:
            instance_node = Node(node.name + "/" + str(len(instances)), node.sequence)
            out_graph.add_node(instance_node, l=length[node], C=coverage[node])
            instances.append(Instance(node, instance_node, [], [], [], []))

        node_instances[node] = instances

    distances = networkx.get_edge_attributes(graph, 'd')

    for node in node_instances:
        instances = node_instances[node]

        for instance in instances:
            instance_node = instance.instance_node

            for in_node in instance.original_in_nodes:
                in_instances = node_instances[in_node]
                found = False
                for in_instance in in_instances:
                    if node in in_instance.original_out_nodes:
                        out_graph.add_edge(in_instance.instance_node, instance_node,
                            d=distances[(in_instance.node, instance.node)])
                        found = True
                if not found:
                    for in_instance in in_instances:
                        out_graph.add_edge(in_instance.instance_node, instance_node,
                            d=distances[(in_instance.node, instance.node)])

            for out_node in instance.original_out_nodes:
                out_instances = node_instances[out_node]
                found = False
                for out_instance in out_instances:
                    if node in out_instance.original_in_nodes:
                        out_graph.add_edge(instance_node, out_instance.instance_node,
                            d=distances[(instance.node, out_instance.node)])
                        found = True
                if not found:
                    for out_instance in out_instances:
                        pass
                        out_graph.add_edge(instance_node, out_instance.instance_node,
                            d=distances[(instance.node, out_instance.node)])

    print('Done!')

    return out_graph

input_graph = build_input_graph()

correct_paths = get_correct_paths(input_graph)
reads = make_reads(input_graph, correct_paths)

output_graph = build_output_graph(input_graph, correct_paths, reads)

write_sequence_graph(input_graph, INPUT_DOT_FILENAME, INPUT_FA_FILENAME)
write_sequence_graph(output_graph, OUTPUT_DOT_FILENAME, OUTPUT_FA_FILENAME)
write_reads(reads)